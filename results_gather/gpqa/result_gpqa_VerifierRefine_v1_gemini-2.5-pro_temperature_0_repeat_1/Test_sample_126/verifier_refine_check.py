from rdkit import Chem
from rdkit.Chem import rdMolDescriptors

def check_correctness_of_cope_rearrangement():
    """
    Checks if the Cope rearrangement of 5-butylnona-2,6-diene correctly yields
    4-ethyl-3-methyldeca-1,5-diene.
    """
    try:
        # Step 1: Define the starting material and the proposed product from the answer.
        # Starting material: 5-butylnona-2,6-diene
        start_smiles = "CC=CCC(CCCC)C=CCC"
        start_mol = Chem.MolFromSmiles(start_smiles)
        if start_mol is None:
            return "Error: Could not parse the SMILES for the starting material."

        # Proposed product (Option C): 4-ethyl-3-methyldeca-1,5-diene
        answer_c_smiles = "C=CC(C)C(CC)C=CCCCC"
        answer_c_mol = Chem.MolFromSmiles(answer_c_smiles)
        if answer_c_mol is None:
            return "Error: Could not parse the SMILES for the answer molecule (Option C)."

        # Step 2: Check if they are isomers. This is a necessary condition.
        start_formula = rdMolDescriptors.CalcMolFormula(start_mol)
        answer_c_formula = rdMolDescriptors.CalcMolFormula(answer_c_mol)
        if start_formula != answer_c_formula:
            return f"Incorrect: The proposed product (formula {answer_c_formula}) is not an isomer of the starting material (formula {start_formula})."

        # Step 3: Programmatically perform the Cope rearrangement on the starting molecule.
        # The rearranging system is a 1,5-diene. We find this substructure.
        patt = Chem.MolFromSmarts("[C]=[C]-[C]-[C]-[C]=[C]")
        matches = start_mol.GetSubstructMatches(patt)

        if not matches:
            return "Error: Could not find a 1,5-diene system in the starting molecule to perform the rearrangement."
        
        # For this molecule, there's only one such system. We take the first match.
        match_indices = matches[0]
        
        # These indices correspond to the 6 carbons of the 1,5-diene system.
        # Let's name them according to the general mechanism C1'=C2'-C3'-C4'-C5'=C6'
        idx_c1p, idx_c2p, idx_c3p, idx_c4p, idx_c5p, idx_c6p = match_indices

        # Create an editable version of the starting molecule
        emol = Chem.EditableMol(start_mol)

        # Apply the bond changes for a [3,3]-sigmatropic rearrangement:
        # 1. Break the C3'-C4' sigma bond
        emol.RemoveBond(idx_c3p, idx_c4p)
        # 2. Form a new C1'-C6' sigma bond
        emol.AddBond(idx_c1p, idx_c6p, Chem.BondType.SINGLE)
        # 3. Shift the pi bonds: C1'=C2' -> C2'=C3' and C5'=C6' -> C4'=C5'
        emol.RemoveBond(idx_c1p, idx_c2p)
        emol.AddBond(idx_c1p, idx_c2p, Chem.BondType.SINGLE)
        emol.AddBond(idx_c2p, idx_c3p, Chem.BondType.DOUBLE)
        emol.RemoveBond(idx_c5p, idx_c6p)
        emol.AddBond(idx_c5p, idx_c6p, Chem.BondType.SINGLE)
        emol.AddBond(idx_c4p, idx_c5p, Chem.BondType.DOUBLE)

        # Retrieve the final molecule from the editor
        predicted_mol_raw = emol.GetMol()
        
        # Clean up atom valencies and aromaticity flags
        Chem.SanitizeMol(predicted_mol_raw)

        # Step 4: Compare the canonical SMILES of the predicted product and the answer.
        predicted_smiles_canonical = Chem.MolToSmiles(predicted_mol_raw, canonical=True)
        answer_c_smiles_canonical = Chem.MolToSmiles(answer_c_mol, canonical=True)

        if predicted_smiles_canonical == answer_c_smiles_canonical:
            return "Correct"
        else:
            return (f"Incorrect: The product generated by the Cope rearrangement does not match the molecule in option C.\n"
                    f"Predicted Product SMILES: {predicted_smiles_canonical}\n"
                    f"Answer C SMILES: {answer_c_smiles_canonical}")

    except Exception as e:
        return f"An error occurred during the check: {e}"

# Run the check
result = check_correctness_of_cope_rearrangement()
print(result)